{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","addItem","e","state","taskName","newItem","id","Date","now","value","isDone","list","push","console","log","setState","handleChange","myid","list2","foundIndex","findIndex","x","handleVisibility","item","sty","bind","updatedList","this","filter","input","className","onChange","updateInput","target","type","placeholder","required","onClick","map","key","style","float","removeItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OA0HeA,G,wDAtHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,QAAU,SAACC,GACT,GAA4B,KAAxB,EAAKC,MAAMC,SAAiB,CAC9B,IAAMC,EAAU,CACdC,GAAIC,KAAKC,MACTC,MAAO,EAAKN,MAAMC,SAClBM,QAAQ,GAEJC,EAAI,YAAO,EAAKR,MAAMQ,MAC5BA,EAAKC,KAAKP,GACVQ,QAAQC,IAAI,EAAKX,OACjB,EAAKY,SAAS,CACZX,SAAU,GACVO,SAEFE,QAAQC,IAAI,EAAKX,SAxBF,EAsCnBa,aAAe,SAACC,GACd,IAAMC,EAAK,YAAO,EAAKf,MAAMQ,MACzBQ,EAAaD,EAAME,WAAU,SAACC,GAAD,OAAOA,EAAEf,KAAOW,KACjDC,EAAMC,GAAYT,QAAUQ,EAAMC,GAAYT,OAC9C,EAAKK,SAAS,CACZJ,KAAMO,KA3CS,EA+CnBI,iBAAmB,SAACC,GAClB,EAAKR,SAAS,CACZS,IAAKD,EAAKb,OAAS,WAAa,UA/ClC,EAAKT,QAAU,EAAKA,QAAQwB,KAAb,gBACf,EAAKtB,MAAQ,CACXqB,IAAK,OACLpB,SAAU,GACVO,KAAM,IANS,E,uDA4BRL,GACT,IACMoB,EADI,YAAOC,KAAKxB,MAAMQ,MACHiB,QAAO,SAACL,GAAD,OAAUA,EAAKjB,KAAOA,KACtDqB,KAAKZ,SAAS,CAAEJ,KAAMe,M,kCAGZG,GACVF,KAAKZ,SAAS,CAAEX,SAAUyB,M,+BAkBlB,IAAD,OACP,OACE,yBAAKC,UAAU,2BACb,wBAAIA,UAAU,mBAAd,YACA,6BACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACf,yBAAKA,UAAU,SACb,2BACEA,UAAU,eACVC,SAAU,SAAC7B,GAAD,OAAO,EAAK8B,YAAY9B,EAAE+B,OAAOxB,QAC3CA,MAAOkB,KAAKxB,MAAMC,SAClB8B,KAAK,OACLC,YAAY,kBACZC,UAAQ,KAGZ,yBAAKN,UAAU,SACb,4BAAQO,QAASV,KAAK1B,QAAS6B,UAAU,mBAAzC,QAIF,yBAAKA,UAAU,WAEjB,6BACA,wBAAIA,UAAU,mBAAd,cACA,yBAAKA,UAAU,aACZH,KAAKxB,MAAMQ,KAAK2B,KAAI,SAACf,GACpB,OACE,yBAAKO,UAAU,uBAAuBS,IAAKhB,EAAKjB,IAI9C,yBAAKwB,UAAU,SACb,2BACEA,UAAU,MACVC,SAAU,kBAAM,EAAKf,aAAaO,EAAKjB,KACvC4B,KAAK,cAGT,yBAAKJ,UAAU,SACb,wBACEA,UAAWP,EAAKb,OAAS,WAAa,OACtC8B,MAAO,CAAEC,MAAO,SAEflB,EAAKd,QAGV,yBAAKqB,UAAU,SACb,4BACEA,UAAU,iBACVU,MAAO,CAAEC,MAAO,SAChBJ,QAAS,kBAAM,EAAKK,WAAWnB,EAAKjB,MAHtC,qB,GAvGAqC,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8649e303.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addItem = this.addItem.bind(this);\n    this.state = {\n      sty: \"none\",\n      taskName: \"\",\n      list: [],\n    };\n  }\n\n  addItem = (e) => {\n    if (this.state.taskName !== \"\") {\n      const newItem = {\n        id: Date.now(),\n        value: this.state.taskName,\n        isDone: false,\n      };\n      const list = [...this.state.list];\n      list.push(newItem);\n      console.log(this.state);\n      this.setState({\n        taskName: \"\",\n        list,\n      });\n      console.log(this.state);\n    }\n  };\n\n  removeItem(id) {\n    const list = [...this.state.list];\n    const updatedList = list.filter((item) => item.id !== id);\n    this.setState({ list: updatedList });\n  }\n\n  updateInput(input) {\n    this.setState({ taskName: input });\n  }\n\n  handleChange = (myid) => {\n    const list2 = [...this.state.list];\n    let foundIndex = list2.findIndex((x) => x.id === myid);\n    list2[foundIndex].isDone = !list2[foundIndex].isDone;\n    this.setState({\n      list: list2,\n    });\n  };\n\n  handleVisibility = (item) => {\n    this.setState({\n      sty: item.isDone ? \"line-thr\" : \"none\",\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App-container container\">\n        <h1 className=\"text-center p-5\">Todo App</h1>\n        <br />\n        <div className=\"row\">\n          <div className=\"col-2\"></div>\n          <div className=\"col-5\">\n            <input\n              className=\"form-control\"\n              onChange={(e) => this.updateInput(e.target.value)}\n              value={this.state.taskName}\n              type=\"text\"\n              placeholder=\"Enter Task Name\"\n              required\n            />\n          </div>\n          <div className=\"col-3\">\n            <button onClick={this.addItem} className=\"btn btn-success\">\n              Add\n            </button>\n          </div>\n          <div className=\"col-2\"></div>\n        </div>\n        <br />\n        <h3 className=\"text-center p-3\">Task List:</h3>\n        <div className=\"container\">\n          {this.state.list.map((item) => {\n            return (\n              <div className=\"row alert alert-info\" key={item.id}>\n                {\n                  //this.handleVisibility(item)\n                }\n                <div className=\"col-2\">\n                  <input\n                    className=\"p-0\"\n                    onChange={() => this.handleChange(item.id)}\n                    type=\"checkbox\"\n                  />\n                </div>\n                <div className=\"col-5\">\n                  <h3\n                    className={item.isDone ? \"line-thr\" : \"none\"}\n                    style={{ float: \"left\" }}\n                  >\n                    {item.value}\n                  </h3>\n                </div>\n                <div className=\"col-5\">\n                  <button\n                    className=\"btn btn-danger\"\n                    style={{ float: \"right\" }}\n                    onClick={() => this.removeItem(item.id)}\n                  >\n                    Delete\n                  </button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}